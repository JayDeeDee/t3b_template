//
// SASS Functions
//
// @package #{ext_directory()}
// @path  _Settings/_Functions.sass
// @link http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#function_directives
//


// =============================================================================
// Image-Url
// =============================================================================
// @description
// Return the path of an Image asset.
//
// @param imagePath
// @returns
//   string
//
// @example
//   .selector {
//     background-image: image-url("logo.png");
//   }
// =============================================================================
@function image-url($imagePath) {
  @return url(#{"../Images/" + $imagePath});
}


// =============================================================================
// Relative Size
// =============================================================================
// @description Calculates em's based on pixel values
//
// @param target-size, context, unit
// @returns
//   1.1875em
//
// @example
//   .selector {
//     font-size: rs(19, 16);
//   }
// =============================================================================
@function rs($target-size, $context: $base-font-size, $unit: em) {
	@return #{$target-size/$context}$unit;
}


// =============================================================================
// Text direction check
// =============================================================================
// @description
// Checks the reading-direction of the site based on the '$direction' variable
// and sets the correct $start and $end variables
// @author necolas
// @link https://github.com/necolas/suit
// =============================================================================
$direction: ltr !default;
$start: left !default;
$end: right !default;
@if $direction == rtl {
	$start: right;
	$end: left;
}


// =============================================================================
// Color-Adjust
// =============================================================================
// @description
// Adjust a color based on the lightness which is passed as a second parameter
// @author necolas
// @link https://github.com/necolas/suit
//
// @param color, contrast
// @returns
//   #FFF
//
// @example
//   .selector {
//     background: color-adjust(#0097d7, 100%);
//   }
// =============================================================================
@function color-adjust($color, $contrast: 100%) {
	@if (lightness($color) > 50) {
		@return darken($color, $contrast)
	}
	@else {
		@return lighten($color, $contrast)
	}
}


// =============================================================================
// Map-Fetch
// =============================================================================
// @description
// Navigate a nested maps with map-fetch() in Sass
// @author jlong
// @link https://gist.github.com/jlong/8760275
//
// @param map, keys
// @returns
//   value
//
// @example
//   @each $key, $value in map-get($headings, elements) {
//     #{$key}, .#{$key} {
//       font-size: map-fetch($headings, elements $key font-size) +px;
//      }
//    }
// =============================================================================
@function map-fetch($map, $keys) {
  $key: nth($keys, 1);
  $length: length($keys);
  $value: map-get($map, $key);
  @if ($length > 1) {
    $rest: ();
    @for $i from 2 through $length {
      $rest: append($rest, nth($keys, $i))
    }
    @return map-fetch($value, $rest)
  } @else {
    @return $value;
  }
}
