//
// SASS Functions
//
// Styleguide 1.1
//


//
// Image-Url($imagePath)
//
// Return the path of an Image asset.
//
// Markup:
// .selector {
// 	background-image: image-url("logo.png");
// }
//
// Styleguide 1.1.1
//
@function image-url($imagePath) {
  @return url(#{"../Images/" + $imagePath});
}



//
// Relative Size($target-size, $context, $unit)
//
// Calculates em's based on pixel values.
//
// Markup:
// .selector {
// 	font-size: rs(19, 16);
// }
//
// Styleguide 1.1.2
//
@function rs($target-size, $context: $base-font-size, $unit: em) {
	@return #{$target-size/$context}$unit;
}


// =============================================================================
// Text direction check
// =============================================================================
// @description
// Checks the reading-direction of the site based on the '$direction' variable
// and sets the correct $start and $end variables
// @author necolas
// @link https://github.com/necolas/suit
// =============================================================================
$direction: ltr !default;
$start: left !default;
$end: right !default;
@if $direction == rtl {
	$start: right;
	$end: left;
}


//
// Color-Adjust($color, $contrast)
//
// Adjust a color based on the lightness which is passed as a second parameter, this function was written by @necolas(https://github.com/necolas/).
//
// Markup:
// .selector {
//   background: color-adjust(#0097d7, 100%);
// }
//
// Styleguide 1.1.3
//
@function color-adjust($color, $contrast: 100%) {
	@if (lightness($color) > 50) {
		@return darken($color, $contrast)
	}
	@else {
		@return lighten($color, $contrast)
	}
}


//
// Map-Fetch($map, $keys)
//
// Navigate a nested maps with map-fetch() in Sass, this function was written by @jlong(https://github.com/jlong/)
//
// Markup:
// @each $key, $value in map-get($headings, elements) {
//  .selector {
//    font-size: map-fetch($headings, elements $key font-size) +px;
//   }
// }
//
// Styleguide 1.1.4
//
@function map-fetch($map, $keys) {
	$key: nth($keys, 1);
	$length: length($keys);
	$value: map-get($map, $key);
	@if ($length > 1) {
		$rest: ();
		@for $i from 2 through $length {
			$rest: append($rest, nth($keys, $i))
		}
		@return map-fetch($value, $rest)
	} @else {
		@return $value;
	}
}


//
// Map-RemoveKeys($map, $keys)
//
// Remove multiple keys in a Sass map at once.
//
// Markup:
// $newDecalarationsMap: map-removeKeys($declarations, font-size margin-bottom);
//
// Styleguide 1.1.5
//
@function map-removeKeys($map, $keys) {
	$length: length($keys);
	@if ($length > 1) {
		$restMap: $map;
		@each $key in $keys {
			$restMap: map-remove($restMap, $key);
		}
		@return $restMap;
	} @else {
		@return map-remove($map, $keys);
	}
}
