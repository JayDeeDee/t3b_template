//
// SASS Mixins
//
// @package #{$package_name()}
// @path _settings/_Mixins.scss
// @link http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#mixins
//


// =============================================================================
// Image-Dimension Mixin
// =============================================================================
// @description
// Get the dimensions of an image-file located in the 'images_dir'
//
// @param img
// @returns
//   width: 200px;
//   height: 75px;
//
// @example
//   .selector {
//     @include img-wh('brand-logo.png');
//   }
// =============================================================================
@mixin img-wh($img) {
  width: image-width($img);
  height: image-height($img);
}


// =============================================================================
// High density Image-Dimensions Mixin
// =============================================================================
// @description
// Get the dimensions of an image-file located in the 'images_dir' and create
// output wich displays an image optimized for high density screens
//
// @param img
// @returns
//   background-size: 200px 75px;
//   background-image: url('../Images/brand-logo_@2.png');
//
// @example
//   .selector {
//     @include hdpi-img('brand-logo.png');
//   }
// =============================================================================
@mixin hdpi-img($img) {
  background-size: image-width($img)/2 image-height($img)/2;
  background-image: image-url('#{$img}');
}


// =============================================================================
// Image-Replacement Mixin
// =============================================================================
// @description
// A image-replacement mixin wich generates the image-dimensions as CSS rules and
// @extends the .ir rule inside the _helper.scss file.
// Default $display-mode is set to 'block'.
//
// @param image, display-mode
// @returns
//   display: block;
//   width: 200px;
//   height: 75px;
//   background-image: url('../Images/image.png');
//
// @example
//   .selector {
//     @include image-replacement('image.png');
//   }
// =============================================================================
@mixin image-replacement($image, $display-mode: block) {
  @if $image { // Output the image dimensions if an image is passed as an argument
    display: $display-mode;
    @include img-wh('#{$image}');
    @extend .ir;
    background-image: image-url('#{$image}');
  }
}


// =============================================================================
// REM Unit Mixin
// =============================================================================
// @description
// Creates a property independent 'rem' calculation with a pixel fallback,
// default property is set to 'font-size'
//
// @param property, value
// @returns
//   font-size: 1.125rem;
//   font-size: 18px;
//
// @example
//   .selector {
//     @include rem($property: font-size, $value: 18);
//   }
// =============================================================================
@mixin rem($property: font-size, $value: 16) {
  #{$property}: $value +px;
  #{$property}: ($value / 16)*1rem;
}


// =============================================================================
// Font-Size Mixin
// =============================================================================
// @description
// Create a fully formed type style (sizing and vertical rhythm) by passing in a
// single value
// @author CSSWizardry
//
// @param size, append-vrythm
// @returns
//   font-size: 1rem;
//   font-size: 16px;
//   line-height: 1;
//
// @example
//   .selector {
//     @include rem($size: 16, $append-vrythm: true);
//   }
// =============================================================================
@mixin font-size($size, $append-vrythm: false) {
  @include rem(font-size, $size);
  @if $append-vrythm {
    line-height: ceil($size / $base-line-height) * ($base-line-height / $size);
  }
}


// =============================================================================
// Triangle Mixin
// =============================================================================
// @description Create a css arrow as per http://cssarrowplease.com/
//
// @param size, append-vrythm
// @returns
//   content: "";
//   cdisplay: block;
//   cwidth: 0;
//   cheight: 0;
//   cborder: solid 5px;
//   border-color: #FFF transparent transparent transparent;
//
// @example
//   .selector:after {
//     position: absolute;
//     top: -5px;
//     left: 50%;
//     margin-left: -2.5px;
//     @include css-triangle(5px, #fff, bottom);
//   }
// =============================================================================
@mixin cssTriangle($triangle-size, $triangle-color, $triangle-direction) {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border: solid $triangle-size;
  @if ($triangle-direction == top)    { border-color: $triangle-color transparent transparent transparent; }
  @if ($triangle-direction == bottom) { border-color: transparent transparent $triangle-color transparent; }
  @if ($triangle-direction == left)   { border-color: transparent transparent transparent $triangle-color; }
  @if ($triangle-direction == right)  { border-color: transparent $triangle-color transparent transparent; }
}


// =============================================================================
// Viewport Mixin
// =============================================================================
// @description
// Basicly the same as <meta name="viewport" content="width=device-width">
// but the future proof way.
// @link http://dev.w3.org/csswg/css-device-adapt/
//
// @param size, append-vrythm
// @returns
//   @-webkit-viewport {
//     width: device-width;
//     zoom: 1;
//   }
//   @-moz-viewport {
//     width: device-width;
//     zoom: 1;
//   }
//   @-ms-viewport {
//     width: device-width;
//     zoom: 1;
//   }
//   @-o-viewport {
//     width: device-width;
//     zoom: 1;
//   }
//   @viewport {
//     width: device-width;
//     zoom: 1;
//   }
//
// @example
//   @include viewport($width: device-width, $zoom: 1);
// =============================================================================
@mixin viewport($width: false, $height: false, $zoom: false, $orientation: false, $user-zoom: false) {
  @-webkit-viewport {
    @if $width       { width: $width; }
    @if $height      { height: $height; }
    @if $zoom        { zoom: $zoom; }
    @if $orientation { orientation: $orientation; }
    @if $user-zoom   { user-zoom: $user-zoom; }
  }
  @-moz-viewport {
    @if $width       { width: $width; }
    @if $height      { height: $height; }
    @if $zoom        { zoom: $zoom; }
    @if $orientation { orientation: $orientation; }
    @if $user-zoom   { user-zoom: $user-zoom; }
  }
  @-ms-viewport {
    @if $width       { width: $width; }
    @if $height      { height: $height; }
    @if $zoom        { zoom: $zoom; }
    @if $orientation { orientation: $orientation; }
    @if $user-zoom   { user-zoom: $user-zoom; }
  }
  @-o-viewport {
    @if $width       { width: $width; }
    @if $height      { height: $height; }
    @if $zoom        { zoom: $zoom; }
    @if $orientation { orientation: $orientation; }
    @if $user-zoom   { user-zoom: $user-zoom; }
  }
  @viewport {
    @if $width       { width: $width; }
    @if $height      { height: $height; }
    @if $zoom        { zoom: $zoom; }
    @if $orientation { orientation: $orientation; }
    @if $user-zoom   { user-zoom: $user-zoom; }
  }
}


// =============================================================================
// Hyphens mixin
// =============================================================================
// @description
// Adds all missing vendor prefixes for the CSS Hyphens property
// @link http://www.w3.org/TR/css3-text/#hyphenation
//
// @param arg
// @returns
//   -webkit-hyphens: $arg;
//      -moz-hyphens: $arg;
//       -ms-hyphens: $arg;
//        -o-hyphens: $arg;
//           hyphens: $arg;
//
// @example
//   .selector {
//     @include hyphens(break-word);
//   }
// =============================================================================
@mixin hyphens($arg) {
  -webkit-hyphens: $arg;
     -moz-hyphens: $arg;
      -ms-hyphens: $arg;
       -o-hyphens: $arg;
          hyphens: $arg;
}


// =============================================================================
// Input placeholder Mixin
// =============================================================================
// @description
// Set a custom color for HTML placeholders
//
// @param color
// @returns
//   .selector::-webkit-input-placeholder { color: #ccc; }
//   .selector:-moz-placeholder { color: #ccc; }
//   .selector:-ms-input-placeholder { color: #ccc; }
//
// @example
//   .selector {
//     @include placeholder(#ccc);
//   }
// =============================================================================
@mixin placeholder($color) {
  &::-webkit-input-placeholder { color: $color; }
  &:-moz-placeholder { color: $color; }
  &:-ms-input-placeholder { color: $color; }
}